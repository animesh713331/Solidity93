{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "recordIdHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "fileHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "issuedAt",
						"type": "uint256"
					}
				],
				"name": "RecordIssued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "recordIdHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "revoker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "revokedAt",
						"type": "uint256"
					}
				],
				"name": "RecordRevoked",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_issuer",
						"type": "address"
					}
				],
				"name": "addIssuer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_recordIdHash",
						"type": "bytes32"
					}
				],
				"name": "getRecord",
				"outputs": [
					{
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "fileHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "issuedAt",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "revoked",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "isIssuer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_recordIdHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_fileHash",
						"type": "bytes32"
					}
				],
				"name": "issueRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_issuer",
						"type": "address"
					}
				],
				"name": "removeIssuer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_recordIdHash",
						"type": "bytes32"
					}
				],
				"name": "revokeRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_recordIdHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_fileHash",
						"type": "bytes32"
					}
				],
				"name": "verifyRecord",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Manages the immutable registry of verified certificates and records. The contract serves as a tamper-proof ledger for all credentials issued by approved entities.",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"addIssuer(address)": {
					"details": "Adds a new address to the list of approved issuers.",
					"params": {
						"_issuer": "The address to be added."
					}
				},
				"constructor": {
					"details": "The contract deployer is set as the initial admin and issuer."
				},
				"issueRecord(bytes32,bytes32)": {
					"details": "The recordIdHash is a unique identifier for the record (e.g., a hash of the off-chain ID).",
					"params": {
						"_fileHash": "The hash of the file (e.g., PDF) being certified.",
						"_recordIdHash": "The unique hash of the off-chain record ID."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeIssuer(address)": {
					"details": "Removes an address from the list of approved issuers.",
					"params": {
						"_issuer": "The address to be removed."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"revokeRecord(bytes32)": {
					"details": "Can only be called by the original issuer or the contract owner.",
					"params": {
						"_recordIdHash": "The unique hash of the off-chain record ID."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"verifyRecord(bytes32,bytes32)": {
					"details": "This function is critical for off-chain verification processes.",
					"params": {
						"_fileHash": "The hash of the file to verify.",
						"_recordIdHash": "The unique hash of the off-chain record ID."
					},
					"returns": {
						"_0": "A boolean indicating if the record is valid, and a boolean if it has been revoked."
					}
				}
			},
			"title": "CertRegistry",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"issueRecord(bytes32,bytes32)": {
					"notice": "Issues a new record and stores it on the blockchain."
				},
				"revokeRecord(bytes32)": {
					"notice": "Revokes an existing record."
				},
				"verifyRecord(bytes32,bytes32)": {
					"notice": "Verifies a record's existence and authenticity."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SIH_Project Contract/CertRegistry.sol": "CertRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"SIH_Project Contract/CertRegistry.sol": {
			"keccak256": "0x22467d76777cea9ef1520f2c93cfa7d4247f22a3bdb1aa966b11ded267b4cccf",
			"license": "MIT",
			"urls": [
				"bzz-raw://34c30df3ed5115f9aae67bc34322c92a44ed9e6715799d0a1df4180d010c99e2",
				"dweb:/ipfs/QmRoyxWQLCWo2S7Pvhoge2YXntwWTY2JPmJcjFQGDyvpJ8"
			]
		}
	},
	"version": 1
}